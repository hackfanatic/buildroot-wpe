From 155aa4c6a61bd9fc12db6b151d477064c6131d4b Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Fri, 10 Jun 2016 22:13:07 +0000
Subject: [PATCH] Fixing build errors on ARM NEON.

---
 src/graphene-matrix.c | 20 +++++++++++++++++++-
 src/graphene-simd4f.c | 14 +++++++++++++-
 src/graphene-simd4f.h | 16 ++++++++--------
 3 files changed, 40 insertions(+), 10 deletions(-)

diff --git a/src/graphene-matrix.c b/src/graphene-matrix.c
index cbbdec0..75d67a9 100644
--- a/src/graphene-matrix.c
+++ b/src/graphene-matrix.c
@@ -746,7 +746,25 @@ graphene_matrix_get_value (const graphene_matrix_t *m,
       return 0.f;
     }
 
-  return graphene_simd4f_get (r, col);
+  switch (col)
+    {
+    case 0:
+      return graphene_simd4f_get (r, 0);
+
+    case 1:
+      return graphene_simd4f_get (r, 1);
+
+    case 2:
+      return graphene_simd4f_get (r, 2);
+
+    case 3:
+      return graphene_simd4f_get (r, 3);
+
+    default:
+      return 0.f;
+    }
+
+  return 0.f;
 }
 
 /**
diff --git a/src/graphene-simd4f.c b/src/graphene-simd4f.c
index 3a0f903..99ce972 100644
--- a/src/graphene-simd4f.c
+++ b/src/graphene-simd4f.c
@@ -216,7 +216,19 @@ float
 (graphene_simd4f_get) (const graphene_simd4f_t s,
                        unsigned int            i)
 {
-  return graphene_simd4f_get (s, i);
+  switch (i)
+    {
+    case 0:
+      return graphene_simd4f_get (s, 0);
+    case 1:
+      return graphene_simd4f_get (s, 1);
+    case 2:
+      return graphene_simd4f_get (s, 2);
+    case 3:
+      return graphene_simd4f_get (s, 3);
+    }
+
+  return 0.f;
 }
 
 /**
diff --git a/src/graphene-simd4f.h b/src/graphene-simd4f.h
index 5d505d2..4512dcb 100644
--- a/src/graphene-simd4f.h
+++ b/src/graphene-simd4f.h
@@ -1196,12 +1196,12 @@ typedef float32x2_t graphene_simd2f_t;
 # define graphene_simd4f_cross3(a,b) \
   (__extension__ ({ \
     const uint32_t __mask_bits[] = { 0xffffffff, 0xffffffff, 0xffffffff, 0 }; \
-    const int32x4_t mask = vld1q_s32 ((const int32_t *) __mask_bits); \
+    const int32x4_t __mask = vld1q_s32 ((const int32_t *) __mask_bits); \
     const graphene_simd4f_t __a = (a), __b = (b); \
     const graphene_simd2f_t __a_low = vget_low_f32 (__a); \
     const graphene_simd2f_t __b_low = vget_low_f32 (__b); \
-    const graphene_simd4f_t a_yzx = vcombine_f32 (vext_f32 (__a_low, vget_high_f32 (__a), 1), __a_low); \
-    const graphene_simd4f_t b_yzx = vcombine_f32 (vext_f32 (__b_low, vget_high_f32 (__b), 1), __b_low); \
+    const graphene_simd4f_t __a_yzx = vcombine_f32 (vext_f32 (__a_low, vget_high_f32 (__a), 1), __a_low); \
+    const graphene_simd4f_t __b_yzx = vcombine_f32 (vext_f32 (__b_low, vget_high_f32 (__b), 1), __b_low); \
     graphene_simd4f_t __s3 = graphene_simd4f_sub (graphene_simd4f_mul (__b_yzx, __a), \
                                                   graphene_simd4f_mul (__a_yzx, __b)); \
     graphene_simd2f_t __s3_low = vget_low_f32 (__s3); \
@@ -1322,7 +1322,7 @@ typedef float32x2_t graphene_simd2f_t;
     __hi = vpadd_u8 (__hi, __hi); \
     __hi = vpadd_u8 (__hi, __hi); \
     __hi = vpadd_u8 (__hi, __hi); \
-    return ((__hi[0] << 8) | (__lo[0] & 0xff)); \
+    (bool) ((__hi[0] << 8) | (__lo[0] & 0xff)); \
   }))
 
 # define graphene_simd4f_cmp_eq(a,b) \
@@ -1347,25 +1347,25 @@ typedef float32x2_t graphene_simd2f_t;
 
 # define graphene_simd4f_cmp_lt(a,b) \
   (__extension__ ({ \
-    const uint8x16_t __mask = vcltq_f32 ((a), (b)); \
+    const uint8x16_t __mask = vreinterpretq_u8_u32(vcltq_f32 ((a), (b))); \
     (bool) (_graphene_movemask (__mask) != 0); \
   }))
 
 # define graphene_simd4f_cmp_le(a,b) \
   (__extension__ ({ \
-    const uint8x16_t __mask = vcleq_f32 ((a), (b)); \
+    const uint8x16_t __mask = vreinterpretq_u8_u32(vcleq_f32 ((a), (b))); \
     (bool) (_graphene_movemask (__mask) != 0); \
   }))
 
 # define graphene_simd4f_cmp_ge(a,b) \
   (__extension__ ({ \
-    const uint8x16_t __mask = vcgeq_f32 ((a), (b)); \
+    const uint8x16_t __mask = vreinterpretq_u8_u32(vcgeq_f32 ((a), (b))); \
     (bool) (_graphene_movemask (__mask) != 0); \
   }))
 
 # define graphene_simd4f_cmp_gt(a,b) \
   (__extension__ ({ \
-    const uint8x16_t __mask = vcgeq_f32 ((a), (b)); \
+    const uint8x16_t __mask = vreinterpretq_u8_u32(vcgeq_f32 ((a), (b))); \
     (bool) (_graphene_movemask (__mask) != 0); \
   }))
 
-- 
2.8.1

